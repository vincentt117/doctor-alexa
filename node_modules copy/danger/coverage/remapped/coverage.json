{
"/home/travis/build/danger/danger-js/source/ci_source/ci_source.ts":{"path":"/home/travis/build/danger/danger-js/source/ci_source/ci_source.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"b":{},"f":{},"code":"/** A json object that represents the outer ENV */\nexport type Env = any\n\n/** The shape of an object that represents an individual CI */\nexport interface CISource {\n  //** The project name, mainly for showing errors */\n  readonly name: string\n\n  /** Does this validate as being on a particular CI? */\n  readonly isCI: boolean\n\n  /** Does this validate as being on a particular PR on a CI? */\n  readonly isPR: boolean\n\n  /** What is the reference slug for this environment? */\n  readonly repoSlug: string\n\n  /** What platforms can this CI communicate with? */\n  readonly supportedPlatforms: Array<string>\n\n  /** What unique id can be found for the code review platform's PR */\n  readonly pullRequestID: string\n}","l":{}},
"/home/travis/build/danger/danger-js/source/commands/danger-pr.ts":{"path":"/home/travis/build/danger/danger-js/source/commands/danger-pr.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":35}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":29}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":29}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":51}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":72}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":68}},"10":{"start":{"line":12,"column":10},"end":{"line":12,"column":28}},"11":{"start":{"line":14,"column":0},"end":{"line":16,"column":22}},"12":{"start":{"line":18,"column":20},"end":{"line":18,"column":65}},"13":{"start":{"line":20,"column":0},"end":{"line":40,"column":1}},"14":{"start":{"line":21,"column":2},"end":{"line":21,"column":57}},"15":{"start":{"line":22,"column":2},"end":{"line":22,"column":22}},"16":{"start":{"line":24,"column":13},"end":{"line":24,"column":47}},"17":{"start":{"line":26,"column":2},"end":{"line":39,"column":3}},"18":{"start":{"line":27,"column":4},"end":{"line":27,"column":90}},"19":{"start":{"line":28,"column":4},"end":{"line":28,"column":24}},"20":{"start":{"line":33,"column":4},"end":{"line":38,"column":5}},"21":{"start":{"line":34,"column":6},"end":{"line":34,"column":48}},"22":{"start":{"line":35,"column":21},"end":{"line":35,"column":100}},"23":{"start":{"line":36,"column":23},"end":{"line":36,"column":81}},"24":{"start":{"line":37,"column":6},"end":{"line":37,"column":45}},"25":{"start":{"line":43,"column":32},"end":{"line":43,"column":36}},"26":{"start":{"line":44,"column":4},"end":{"line":49,"column":5}},"27":{"start":{"line":45,"column":6},"end":{"line":45,"column":34}},"28":{"start":{"line":47,"column":6},"end":{"line":47,"column":95}},"29":{"start":{"line":48,"column":6},"end":{"line":48,"column":26}},"30":{"start":{"line":51,"column":4},"end":{"line":54,"column":5}},"31":{"start":{"line":52,"column":6},"end":{"line":52,"column":105}},"32":{"start":{"line":53,"column":6},"end":{"line":53,"column":26}},"33":{"start":{"line":56,"column":4},"end":{"line":56,"column":34}},"34":{"start":{"line":62,"column":21},"end":{"line":62,"column":45}},"35":{"start":{"line":63,"column":18},"end":{"line":63,"column":66}},"36":{"start":{"line":64,"column":2},"end":{"line":64,"column":16}}},"fnMap":{"1":{"name":"validateDangerfileExists","line":42,"loc":{"start":{"line":42,"column":50},"end":{"line":57,"column":1}}},"2":{"name":"runDanger","line":59,"loc":{"start":{"line":59,"column":71},"end":{"line":65,"column":1}}}},"branchMap":{"1":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":46}},{"start":{"line":18,"column":50},"end":{"line":18,"column":65}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":0},"end":{"line":40,"column":1}},{"start":{"line":20,"column":0},"end":{"line":40,"column":1}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":39,"column":3}},{"start":{"line":26,"column":2},"end":{"line":39,"column":3}}]},"4":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":38,"column":5}},{"start":{"line":33,"column":4},"end":{"line":38,"column":5}}]},"5":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":54,"column":5}},{"start":{"line":51,"column":4},"end":{"line":54,"column":5}}]},"6":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":14}},{"start":{"line":51,"column":18},"end":{"line":51,"column":32}}]},"7":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":11},"end":{"line":56,"column":17}},{"start":{"line":56,"column":21},"end":{"line":56,"column":34}}]}},"s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"code":"import * as program from \"commander\"\nimport * as debug from \"debug\"\nimport * as fs from \"fs\"\nimport * as jsome from \"jsome\"\n\nimport { FakeCI } from \"../ci_source/providers/Fake\"\nimport { GitHub } from \"../platforms/GitHub\"\nimport { Executor } from \"../runner/Executor\"\nimport { pullRequestParser } from \"../platforms/github/pullRequestParser\"\nimport { runDangerfileEnvironment } from \"../runner/DangerfileRunner\"\n\nconst d = debug(\"danger:pr\")\n\nprogram\n  .option(\"-d, --dangerfile [filePath]\", \"Specify custom dangefile other than default dangerfile.js\")\n  .parse(process.argv)\n\nconst dangerFile = (program as any).dangerfile || \"dangerfile.js\"\n\nif (program.args.length === 0) {\n  console.error(\"Please include a PR URL to run against\")\n  process.exitCode = 1\n} else {\n  const pr = pullRequestParser(program.args[0])\n\n  if (!pr) {\n    console.error(\"Could not get a repo and a PR number from your URL, bad copy & paste?\")\n    process.exitCode = 1\n  } else {\n    // TODO: Use custom `fetch` in GitHub that stores and uses local cache if PR is closed, these PRs\n    //       shouldn't change often and there is a limit on API calls per hour.\n\n    if (validateDangerfileExists(dangerFile)) {\n      d(`executing dangerfile at ${dangerFile}`)\n      const source = new FakeCI({ DANGER_TEST_REPO: pr.repo, DANGER_TEST_PR: pr.pullRequestNumber })\n      const platform = new GitHub(process.env[\"DANGER_GITHUB_API_TOKEN\"], source)\n      runDanger(source, platform, dangerFile)\n    }\n  }\n}\n\nfunction validateDangerfileExists(filePath: string): boolean {\n    let stat: fs.Stats | null = null\n    try {\n      stat = fs.statSync(filePath)\n    } catch (error) {\n      console.error(`Could not find a dangerfile at ${filePath}, not running against your PR.`)\n      process.exitCode = 1\n    }\n\n    if (!!stat && !stat.isFile()) {\n      console.error(`The resource at ${filePath} appears to not be a file, not running against your PR.`)\n      process.exitCode = 1\n    }\n\n    return !!stat && stat.isFile()\n}\n\nasync function runDanger(source: FakeCI, platform: GitHub, file: string) {\n  const exec = new Executor(source, platform)\n\n  const runtimeEnv = await exec.setupDanger()\n  const results = await runDangerfileEnvironment(file, runtimeEnv)\n  jsome(results)\n}\n","l":{"1":0,"2":0,"3":0,"4":0,"6":0,"7":0,"8":0,"9":0,"10":0,"12":0,"14":0,"18":0,"20":0,"21":0,"22":0,"24":0,"26":0,"27":0,"28":0,"33":0,"34":0,"35":0,"36":0,"37":0,"43":0,"44":0,"45":0,"47":0,"48":0,"51":0,"52":0,"53":0,"56":0,"62":0,"63":0,"64":0}},
"/home/travis/build/danger/danger-js/source/commands/danger-run.ts":{"path":"/home/travis/build/danger/danger-js/source/commands/danger-run.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":35}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":29}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":55}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":42}},"7":{"start":{"line":8,"column":10},"end":{"line":8,"column":29}},"8":{"start":{"line":14,"column":0},"end":{"line":18,"column":22}},"9":{"start":{"line":20,"column":0},"end":{"line":23,"column":2}},"10":{"start":{"line":21,"column":2},"end":{"line":21,"column":32}},"11":{"start":{"line":22,"column":2},"end":{"line":22,"column":22}},"12":{"start":{"line":25,"column":0},"end":{"line":27,"column":1}},"13":{"start":{"line":26,"column":2},"end":{"line":26,"column":23}},"14":{"start":{"line":29,"column":15},"end":{"line":29,"column":89}},"15":{"start":{"line":31,"column":0},"end":{"line":35,"column":1}},"16":{"start":{"line":32,"column":2},"end":{"line":32,"column":56}},"17":{"start":{"line":34,"column":2},"end":{"line":34,"column":22}},"18":{"start":{"line":37,"column":0},"end":{"line":39,"column":1}},"19":{"start":{"line":38,"column":2},"end":{"line":38,"column":47}},"20":{"start":{"line":41,"column":0},"end":{"line":70,"column":1}},"21":{"start":{"line":42,"column":19},"end":{"line":42,"column":57}},"22":{"start":{"line":43,"column":2},"end":{"line":46,"column":3}},"23":{"start":{"line":44,"column":4},"end":{"line":44,"column":83}},"24":{"start":{"line":45,"column":4},"end":{"line":45,"column":24}},"25":{"start":{"line":48,"column":2},"end":{"line":69,"column":3}},"26":{"start":{"line":49,"column":24},"end":{"line":49,"column":69}},"27":{"start":{"line":51,"column":4},"end":{"line":51,"column":68}},"28":{"start":{"line":53,"column":4},"end":{"line":68,"column":5}},"29":{"start":{"line":54,"column":19},"end":{"line":54,"column":42}},"30":{"start":{"line":56,"column":6},"end":{"line":63,"column":7}},"31":{"start":{"line":57,"column":8},"end":{"line":57,"column":50}},"32":{"start":{"line":58,"column":21},"end":{"line":58,"column":51}},"33":{"start":{"line":59,"column":8},"end":{"line":59,"column":42}},"34":{"start":{"line":61,"column":8},"end":{"line":61,"column":75}},"35":{"start":{"line":62,"column":8},"end":{"line":62,"column":28}},"36":{"start":{"line":65,"column":6},"end":{"line":65,"column":26}},"37":{"start":{"line":66,"column":6},"end":{"line":66,"column":34}},"38":{"start":{"line":67,"column":6},"end":{"line":67,"column":26}}},"fnMap":{"1":{"name":"(anonymous_0)","line":20,"loc":{"start":{"line":20,"column":65},"end":{"line":23,"column":1}}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":0},"end":{"line":27,"column":1}},{"start":{"line":25,"column":0},"end":{"line":27,"column":1}}]},"2":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":33}},{"start":{"line":25,"column":38},"end":{"line":25,"column":61}}]},"3":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":41},"end":{"line":29,"column":75}},{"start":{"line":29,"column":79},"end":{"line":29,"column":88}}]},"4":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":0},"end":{"line":35,"column":1}},{"start":{"line":31,"column":0},"end":{"line":35,"column":1}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":0},"end":{"line":39,"column":1}},{"start":{"line":37,"column":0},"end":{"line":39,"column":1}}]},"6":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":10}},{"start":{"line":37,"column":14},"end":{"line":37,"column":26}}]},"7":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":0},"end":{"line":70,"column":1}},{"start":{"line":41,"column":0},"end":{"line":70,"column":1}}]},"8":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":10}},{"start":{"line":41,"column":14},"end":{"line":41,"column":25}}]},"9":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":46,"column":3}},{"start":{"line":43,"column":2},"end":{"line":46,"column":3}}]},"10":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":69,"column":3}},{"start":{"line":48,"column":2},"end":{"line":69,"column":3}}]},"11":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":24},"end":{"line":49,"column":50}},{"start":{"line":49,"column":54},"end":{"line":49,"column":69}}]},"12":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":6},"end":{"line":63,"column":7}},{"start":{"line":56,"column":6},"end":{"line":63,"column":7}}]},"13":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":10},"end":{"line":56,"column":16}},{"start":{"line":56,"column":20},"end":{"line":56,"column":33}}]}},"s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0},"code":"import * as program from \"commander\"\nimport * as debug from \"debug\"\nimport * as fs from \"fs\"\nimport { getCISource } from \"../ci_source/get_ci_source\"\nimport { getPlatformForEnv } from \"../platforms/platform\"\nimport {Executor} from \"../runner/Executor\"\n\nconst d = debug(\"danger:run\")\ndeclare const global: any\n\n// TODO: if we get more options around the dangerfile, we should\n//       support sharing `program` setup code with danger-pr.ts\n\nprogram\n  .option(\"-v, --verbose\", \"Verbose output of files\")\n  .option(\"-c, --external-ci-provider [modulePath]\", \"Specify custom CI provider\")\n  .option(\"-d, --dangerfile [filePath]\", \"Specify custom dangefile other than default dangerfile.js\")\n  .parse(process.argv)\n\nprocess.on(\"unhandledRejection\", function(reason: string, _p: any) {\n  console.log(\"Error: \", reason)\n  process.exitCode = 1\n})\n\nif (process.env[\"DANGER_VERBOSE\"] || (program as any).verbose) {\n  global.verbose = true\n}\n\nconst source = getCISource(process.env, (program as any).externalCiProvider || undefined)\n\nif (!source) {\n  console.log(\"Could not find a CI source for this run\")\n  // Check for ENV[\"CI\"] and wanr they might want a local command instead?\n  process.exitCode = 1\n}\n\nif (source && !source.isPR) {\n  console.log(\"Skipping due to not being a PR\")\n}\n\nif (source && source.isPR) {\n  const platform = getPlatformForEnv(process.env, source)\n  if (!platform) {\n    console.log(`Could not find a source code hosting platform for ${source.name}`)\n    process.exitCode = 1\n  }\n\n  if (platform) {\n    const dangerFile = (program as any).dangerfile || \"dangerfile.js\"\n\n    console.log(`OK, looks good ${source.name} on ${platform.name}`)\n\n    try {\n      const stat = fs.statSync(dangerFile)\n\n      if (!!stat && stat.isFile()) {\n        d(`executing dangerfile at ${dangerFile}`)\n        const exec = new Executor(source, platform)\n        exec.setupAndRunDanger(dangerFile)\n      } else {\n        console.log(`looks like specified ${dangerFile} is not valid path`)\n        process.exitCode = 1\n      }\n    } catch (error) {\n      process.exitCode = 1\n      console.error(error.message)\n      console.error(error)\n    }\n  }\n}\n","l":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"8":0,"14":0,"20":0,"21":0,"22":0,"25":0,"26":0,"29":0,"31":0,"32":0,"34":0,"37":0,"38":0,"41":0,"42":0,"43":0,"44":0,"45":0,"48":0,"49":0,"51":0,"53":0,"54":0,"56":0,"57":0,"58":0,"59":0,"61":0,"62":0,"65":0,"66":0,"67":0}},
"/home/travis/build/danger/danger-js/source/danger.ts":{"path":"/home/travis/build/danger/danger-js/source/danger.ts","statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":23}}},"fnMap":{},"branchMap":{},"s":{"1":0},"b":{},"f":{},"code":"// This file represents the module that is exposed as the danger API\nimport \"babel-polyfill\"","l":{"2":0}},
"/home/travis/build/danger/danger-js/source/dsl/Aliases.ts":{"path":"/home/travis/build/danger/danger-js/source/dsl/Aliases.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"b":{},"f":{},"code":"export type MarkdownString = string\n","l":{}},
"/home/travis/build/danger/danger-js/source/dsl/Commit.ts":{"path":"/home/travis/build/danger/danger-js/source/dsl/Commit.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"b":{},"f":{},"code":"/** A platform agnostic refernce to a Git commit */\nexport interface GitCommit {\n  /** The SHA for the commit */\n  sha: string,\n  /** Who wrote the commit */\n  author: GitCommitAuthor,\n  /** Who deployed the commit */\n  committer: GitCommitAuthor,\n  /** The commit message */\n  message: string,\n  /** Potential parent commits, and other assorted metadata */\n  tree: any,\n  /** SHAs for the commit's parents */\n  parents?: string[],\n}\n\n/** An author of a commit */\nexport interface GitCommitAuthor {\n  /** The display name for the author */\n  name: string,\n  /** The authors email */\n  email: string,\n  /** ISO6801 date string */\n  date: string\n}\n","l":{}},
"/home/travis/build/danger/danger-js/source/dsl/DangerResults.ts":{"path":"/home/travis/build/danger/danger-js/source/dsl/DangerResults.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"b":{},"f":{},"code":"import { Violation } from \"../platforms/messaging/violation\"\nimport { MarkdownString } from \"../dsl/Aliases\"\n\n/**\n * Representation of what running a Dangerfile generates.\n * In the future I'd like this to be cross process, so please\n * do not add functions, only data to this interface.\n */\nexport interface DangerResults {\n  /**\n   * Failed messages\n   * @type {Violation[]}\n   */\n  fails: Array<Violation>\n\n  /**\n   * Messages for info\n   * @type {Violation[]}\n   */\n  warnings: Array<Violation>\n\n  /**\n   * Markdown messages\n   * @type {Violation[]}\n   */\n  messages: Array<Violation>\n\n  /**\n   * Markdown messages at the bottom of the comment\n   * @type {MarkdownString[]}\n   */\n  markdowns: Array<MarkdownString>\n}\n","l":{}},
"/home/travis/build/danger/danger-js/source/dsl/GitDSL.ts":{"path":"/home/travis/build/danger/danger-js/source/dsl/GitDSL.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"b":{},"f":{},"code":"import { GitCommit } from \"./Commit\"\n\n// This is `danger.git`\n\n/** The git specific metadata for a PR */\nexport interface GitDSL {\n  /**\n   * Filepaths with changes relative to the git root\n   * @type {string[]}\n   */\n  readonly modified_files: Readonly<Array<string>>\n\n  /**\n   * Newly created filepaths relative to the git root\n   * @type {string[]}\n   */\n  readonly created_files: Readonly<Array<string>>\n\n  /**\n   * Removed filepaths relative to the git root\n   * @type {string[]}\n   */\n  readonly deleted_files: Readonly<Array<string>>\n\n  /** Offers the diff for a specific file */\n  diffForFile(filename: string): string | null,\n\n  /** The Git commit metadata */\n  readonly commits: Readonly<Array<GitCommit>>\n}\n","l":{}},
"/home/travis/build/danger/danger-js/source/dsl/GitHubDSL.ts":{"path":"/home/travis/build/danger/danger-js/source/dsl/GitHubDSL.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"b":{},"f":{},"code":"import { GitCommit } from \"./Commit\"\n\n// This is `danger.github`\n\n/** The GitHub metadata for your PR */\nexport interface GitHubDSL {\n  /** The PR metadata for a code review session */\n  pr: GitHubPRDSL,\n  /** The github commit metadata for a code review session */\n  commits: Array<GitHubCommit>\n}\n\n// This is `danger.github.pr`\n\n/** What a PR's JSON looks like */\nexport interface GitHubPRDSL {\n  /**\n   * The UUID for the PR\n   * @type {number}\n   */\n  number: number\n\n  /**\n   * The state for the PR\n   * @type {string}\n   */\n  state: \"closed\" | \"open\" | \"locked\" | \"merged\"\n\n  /**\n   * Has the PR been locked to contributors only?\n   * @type {boolean}\n   */\n  locked: boolean\n\n  /**\n   * The title of the PR\n   * @type {string}\n   */\n  title: string\n\n  /**\n   * The markdown body message of the PR\n   * @type {string}\n   */\n  body: string\n\n  /**\n   * ISO6801 Date string for when PR was created\n   * @type {string}\n   */\n  created_at: string\n\n  /**\n   * ISO6801 Date string for when PR was updated\n   * @type {string}\n   */\n  updated_at: string\n\n  /**\n   * optional ISO6801 Date string for when PR was closed\n   * @type {string}\n   */\n  closed_at: string | null\n\n  /**\n   * Optional ISO6801 Date string for when PR was merged.\n   * Danger probably shouldn't be running in this state.\n   * @type {string}\n   */\n  merged_at: string | null\n\n  /**\n   * Merge reference for the _other_ repo.\n   * @type {GitHubMergeRef}\n   */\n  head: GitHubMergeRef\n\n  /**\n   * Merge reference for _this_ repo.\n   * @type {GitHubMergeRef}\n   */\n  base: GitHubMergeRef\n\n  /**\n   * The User who submitted the PR\n   * @type {GitHubUser}\n   */\n  user: GitHubUser\n\n  /**\n   * The User who is assigned the PR\n   * @type {GitHubUser}\n   */\n  assignee: GitHubUser\n\n  /**\n   * The Users who are assigned to the PR\n   * @type {GitHubUser}\n   */\n  assignees: Array<GitHubUser>\n\n  /**\n   * Has the PR been merged yet\n   * @type {boolean}\n   */\n  merged: boolean\n\n  /**\n  * The nuber of comments on the PR\n  * @type {number}\n  */\n  comments: number\n\n  /**\n   * The nuber of review-specific comments on the PR\n   * @type {number}\n   */\n  review_comments: number\n\n  /**\n   * The number of commits in the PR\n   * @type {number}\n   */\n  commits: number\n\n  /**\n   * The number of additional lines in the PR\n   * @type {number}\n   */\n  additions: number\n\n  /**\n   * The number of deleted lines in the PR\n   * @type {number}\n   */\n  deletions: number\n\n  /**\n   * The number of changed files in the PR\n   * @type {number}\n   */\n  changed_files: number\n}\n\n// These are the individual subtypes of objects inside the larger DSL objects above.\n\n/** A GitHub specific implmentation of a git commit */\nexport interface GitHubCommit {\n  /** The raw commit metadata */\n  commit: GitCommit,\n  /** The SHA for the commit */\n  sha: string,\n  /** the url for the commit on GitHub */\n  url: string,\n  /** The GitHub user who wrote the code */\n  author: GitHubUser,\n  /** The GitHub user who shipped the code */\n  committer: GitHubUser,\n  /** An array of parent commit shas */\n  parents: Array<any>\n}\n\n/**\n * A GitHub user account\n */\nexport interface GitHubUser {\n  /**\n   * Generic UUID\n   * @type {number}\n   */\n  id: number\n  /**\n   * The handle for the user/org\n   * @type {string}\n   */\n  login: string\n  /**\n   * Whether the user is an org, or a user\n   * @type {string}\n   */\n  type: \"User\" | \"Organization\"\n}\n\n/**\n * A GitHub Repo\n */\nexport interface GitHubRepo {\n  /**\n   * Generic UUID\n   * @type {number}\n   */\n  id: number\n\n  /**\n   * The name of the repo, e.g. \"Danger-JS\"\n   * @type {string}\n   */\n  name: string\n\n  /**\n   * The full name of the owner + repo, e.g. \"Danger/Danger-JS\"\n   * @type {string}\n   */\n  full_name: string\n\n  /**\n   * The owner of the repo\n   * @type {GitHubUser}\n   */\n  owner: GitHubUser\n\n  /**\n   * Is the repo publicly accessible?\n   * @type {boolean}\n   */\n  private: boolean\n\n  /**\n   * The textual description of the repo\n   * @type {string}\n   */\n  description: string\n\n  /**\n   * Is the repo a fork?\n   * @type {boolean}\n   */\n  fork: boolean\n\n  /**\n   * Is someone assigned to this PR?\n   * @type {GitHubUser}\n   */\n  assignee: GitHubUser\n\n  /**\n   * Are there people assigned to this PR?\n   * @type {Array<GitHubUser>}\n   */\n  assignees: Array<GitHubUser>\n}\n\nexport interface GitHubMergeRef {\n  /**\n   * The human display name for the merge reference, e.g. \"artsy:master\"\n   * @type {string}\n   */\n  label: string\n\n  /**\n   * The reference point for the merge, e.g. \"master\"\n   * @type {string}\n   */\n  ref: string\n\n  /**\n   * The reference point for the merge, e.g. \"704dc55988c6996f69b6873c2424be7d1de67bbe\"\n   * @type {string}\n   */\n  sha: string\n\n  /**\n   * The user that owns the merge reference e.g. \"artsy\"\n   * @type {string}\n   */\n  user: GitHubUser\n}\n","l":{}},
"/home/travis/build/danger/danger-js/source/platforms/messaging/violation.ts":{"path":"/home/travis/build/danger/danger-js/source/platforms/messaging/violation.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"b":{},"f":{},"code":"/**\n * The result of user doing warn, message or fail.\n */\nexport interface Violation {\n  /**\n   * The string representation\n   *\n   * @type {string}\n   */\n  message: string\n}\n","l":{}},
"/home/travis/build/danger/danger-js/source/runner/types.ts":{"path":"/home/travis/build/danger/danger-js/source/runner/types.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"b":{},"f":{},"code":"import { DangerContext } from \"./Dangerfile\"\n\nexport type Path = string\n\nexport interface ResolverConfig {\n  browser?: boolean\n  defaultPlatform: string | null\n  extensions: Array<string>\n  hasCoreModules: boolean\n  moduleDirectories: Array<string>\n  moduleNameMapper: { [key: string]: RegExp } | null\n  modulePaths: Array<Path>\n  platforms?: Array<string>\n}\n\nexport interface HasteConfig {\n  providesModuleNodeModules: Array<string>\n  defaultPlatform?: string | null\n  platforms?: Array<string>\n}\n\nexport interface EnvironmentConstructor {\n  new (config: any): Environment\n}\n\nexport interface Environment extends EnvironmentConstructor {\n  dispose(): void\n  runScript(script: any): any\n  global: any\n  fakeTimers: {\n    clearAllTimers(): void;\n    runAllImmediates(): void;\n    runAllTicks(): void;\n    runAllTimers(): void;\n    runTimersToTime(): void;\n    runOnlyPendingTimers(): void;\n    runWithRealTimers(callback: any): void;\n    useFakeTimers(): void;\n    useRealTimers(): void;\n  }\n  testFilePath: string\n  moduleMocker: any\n}\n\nexport interface DangerfileRuntimeEnv {\n  context: DangerContext\n  environment: Environment\n  runtime: any\n}\n","l":{}}}
