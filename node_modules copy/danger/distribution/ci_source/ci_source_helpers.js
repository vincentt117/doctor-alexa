"use strict";
/**
 * Validates that all ENV keys exist and have a length
 * @param {Env} env The environment.
 * @param {[string]} keys Keys to ensure existence of
 * @returns {bool} true if they exist, false if not
*/
function ensureEnvKeysExist(env, keys) {
    /*const hasKeys = keys.map((key: string): boolean => {
      return env.hasOwnProperty(key) && env[key] != null && env[key].length > 0
    });
    return !includes(hasKeys, false);*/
    return keys.map(function (key) { return env.hasOwnProperty(key) && env[key] != null && env[key].length > 0; })
        .filter(function (x) { return x === false; }).length === 0;
}
exports.ensureEnvKeysExist = ensureEnvKeysExist;
/**
 * Validates that all ENV keys exist and can be turned into ints
 * @param {Env} env The environment.
 * @param {[string]} keys Keys to ensure existence and number-ness of
 * @returns {bool} true if they are all good, false if not
*/
function ensureEnvKeysAreInt(env, keys) {
    /*const hasKeys = keys.map((key: string): boolean => {
      return env.hasOwnProperty(key) && !isNaN(parseInt(env[key]))
    })
    return !includes(hasKeys, false);*/
    return keys.map(function (key) { return env.hasOwnProperty(key) && !isNaN(parseInt(env[key])); })
        .filter(function (x) { return x === false; }).length === 0;
}
exports.ensureEnvKeysAreInt = ensureEnvKeysAreInt;
//# sourceMappingURL=ci_source_helpers.js.map