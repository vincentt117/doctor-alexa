"use strict";
var program = require("commander");
var debug = require("debug");
var fs = require("fs");
var get_ci_source_1 = require("../ci_source/get_ci_source");
var platform_1 = require("../platforms/platform");
var Executor_1 = require("../runner/Executor");
var d = debug("danger:run");
// TODO: if we get more options around the dangerfile, we should
//       support sharing `program` setup code with danger-pr.ts
program
    .option("-v, --verbose", "Verbose output of files")
    .option("-c, --external-ci-provider [modulePath]", "Specify custom CI provider")
    .option("-d, --dangerfile [filePath]", "Specify custom dangefile other than default dangerfile.js")
    .parse(process.argv);
process.on("unhandledRejection", function (reason, _p) {
    console.log("Error: ", reason);
    process.exitCode = 1;
});
if (process.env["DANGER_VERBOSE"] || program.verbose) {
    global.verbose = true;
}
var source = get_ci_source_1.getCISource(process.env, program.externalCiProvider || undefined);
if (!source) {
    console.log("Could not find a CI source for this run");
    // Check for ENV["CI"] and wanr they might want a local command instead?
    process.exitCode = 1;
}
if (source && !source.isPR) {
    console.log("Skipping due to not being a PR");
}
if (source && source.isPR) {
    var platform = platform_1.getPlatformForEnv(process.env, source);
    if (!platform) {
        console.log("Could not find a source code hosting platform for " + source.name);
        process.exitCode = 1;
    }
    if (platform) {
        var dangerFile = program.dangerfile || "dangerfile.js";
        console.log("OK, looks good " + source.name + " on " + platform.name);
        try {
            var stat = fs.statSync(dangerFile);
            if (!!stat && stat.isFile()) {
                d("executing dangerfile at " + dangerFile);
                var exec = new Executor_1.Executor(source, platform);
                exec.setupAndRunDanger(dangerFile);
            }
            else {
                console.log("looks like specified " + dangerFile + " is not valid path");
                process.exitCode = 1;
            }
        }
        catch (error) {
            process.exitCode = 1;
            console.error(error.message);
            console.error(error);
        }
    }
}
//# sourceMappingURL=danger-run.js.map