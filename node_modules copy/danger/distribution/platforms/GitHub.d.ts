/// <reference types="es6-promise" />
import { GitDSL } from "../dsl/GitDSL";
import { CISource } from "../ci_source/ci_source";
import { GitCommit } from "../dsl/Commit";
import { GitHubCommit, GitHubDSL } from "../dsl/GitHubDSL";
import { api as fetch } from "../api/fetch";
export declare type APIToken = string;
/** This represent the GitHub API, and conforming to the Platform Interface */
export declare class GitHub {
    readonly token: APIToken | undefined;
    readonly ciSource: CISource;
    name: string;
    fetch: typeof fetch;
    constructor(token: APIToken | undefined, ciSource: CISource);
    /**
     * Get the Code Review description metadata
     *
     * @returns {Promise<any>} JSON representation
     */
    getReviewInfo(): Promise<any>;
    /**
     * Get the Code Review diff representation
     *
     * @returns {Promise<GitDSL>} the git DSL
     */
    getReviewDiff(): Promise<GitDSL>;
    /**
     * Returns the `github` object on the Danger DSL
     *
     * @returns {Promise<GitHubDSL>} JSON response of the DSL
     */
    getPlatformDSLRepresentation(): Promise<GitHubDSL>;
    /**
     * Returns the response for the new comment
     *
     * @param {GitHubCommit} ghCommit A GitHub based commit
     * @returns {GitCommit} a Git commit representation without GH metadata
     */
    githubCommitToGitCommit(ghCommit: GitHubCommit): GitCommit;
    /**
     * Returns the response for the new comment
     *
     * @param {string} comment you want to post
     * @returns {Promise<any>} JSON response of new comment
     */
    createComment(comment: string): Promise<any>;
    /**
     * Deletes the main Danger comment, used when you have
     * fixed all your failures.
     *
     * @returns {Promise<boolean>} did it work?
     */
    deleteMainComment(): Promise<boolean>;
    /**
     * Either updates an existing comment, or makes a new one
     *
     * @param {string} newComment string value of comment
     * @returns {Promise<boolean>} success of posting comment
     */
    updateOrCreateComment(newComment: string): Promise<boolean>;
    /**
     * Updates the main Danger comment, when Danger has run
     * more than once
     *
     * @param {string} comment updated text
     *
     * @returns {Promise<boolean>} did it work?
     */
    editMainComment(comment: string): Promise<boolean>;
    /**
     * Grabs the contents of an individual file on GitHub
     *
     * @param {string} path path to the file
     * @param {string} [ref] an optional sha
     * @returns {Promise<string>} text contents
     *
     */
    fileContents(path: string, ref?: string): Promise<string>;
    getDangerCommentID(): Promise<number | null>;
    updateCommentWithID(id: number, comment: string): Promise<any>;
    deleteCommentWithID(id: number): Promise<any>;
    getUserID(): Promise<number>;
    postPRComment(comment: string): Promise<any>;
    getPullRequestInfo(): Promise<any>;
    getPullRequestCommits(): Promise<any>;
    getUserInfo(): Promise<any>;
    getPullRequestComments(): Promise<any>;
    getPullRequestDiff(): Promise<any>;
    getFileContents(path: string, ref?: string): Promise<any>;
    post(path: string, headers?: any, body?: any, method?: string): Promise<any>;
    get(path: string, headers?: any, body?: any, method?: string): Promise<any>;
    patch(path: string, headers?: any, body?: any, method?: string): Promise<any>;
}
